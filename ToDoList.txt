C++ FEATURES:
- Switch statements
- Nested loops
- Continue and break (depends on PlantUML)
- Any depth of nested loops and if-statements.
- Templates
- Headers
- overloaded methods
- calls inside conditions of if statements
- elseifNum—>elseifIdx, elseifNumNested—>elseifIdxNested
- implement elseif for nested if statements
- if statement descriptions for several zooms == ignore zoom level in description //$1 []
- if statement description of conditions of more than two lines
- multi-threading

FLOWCHARTS FEATURES:
- line numbers
- Including functions description
- parallel

NAVIGATION / BROWSING
- Integration with Doxygen
- Visualization of zoom levels: 1) Use HTML5  2) Introduce a scroll up-down in zoom level
  3?) Maybe same day, do a local zoom level (click on a part of the diagram to show the 
  lower level details only of that part).
- « I appreciate the automated creation of links between different
  files, associated to function and method calls.  However the links
  are only shown inside the diagrams of the caller, but not in the
  ones of the callee.  In a future version of the code, the authors
  might add a "Referenced by" list for each annotated function,
  similarly to what Doxygen does, when this is possible.  This would
  give developers working on a function/method a quick way of
  checking what is its role inside algorithms implemented in other
  methods and functions.  Another useful feature the authors could
  "borrow" from Doxygen (a tool they often refer to) is the
  possibility of creating links between the diagrams and an html
  version of the source files.  The latter could be created with the
  help of syntax highlighting engines (such as Pygments which is also
  available for Python-3), or by optionally creating links to files
  generated by Doxygen itself. »
- [Possibility] interactive zooming visualization —> Operational implementation: A full diagram will contain in general several zoomable sections. For each of these sections, a certain zoom level choice gets assigned a certain code. Hence, a particular instance of a full diagram, as selected by the user, will contain a unique combination of these codes. Hyperlinks will connect among different instances (code combinations) of the same full diagram. Either:
      1) The GUI browser sends a message to the diagram constructor to tell the latter what diagram exactly we want to see. REAL-TIME GENERATION (can save memory / space / time)
      2) All possible diagrams are built beforehand. OFF-LINE GENERATION.  

INSTALLATION AND OPERATION
- Adapt windows script make_WIN.bat to accept the CSS and JS files.
- The usage of Flowgen requires the user to type a non-minimal
  sequence of commands, e.g. the ones listed in Listing 4 (paper) for their
  example.  The meaning of these commands is likely to be obscure to
  anybody which is not familiar with the implementation of their
  tool, described in Section 4 of the paper.  As pointed out by the
  authors, these commands can be easily implemented in makefiles and
  this is therefore not a major issue.  However the authors might
  consider the possibility of automating this sequence of commands
  inside their own code, by taking as input a list of files and/or
  directories to be searched for.  These could be either passed as
  command line arguments to a "master" script or specified in a
  "configuration file", as one usually does with Doxygen.  The
  sequence of commands currently needed in order to run Flowgen
  reflects the internal implementation of their tool, rather than the
  expected input and output (namely, a list of annotated files, and
  the diagrams in html format respectively).  Making the whole
  process transparent to the user would also help to keep a
  consistent user interface, especially if future versions of the
  code will grow in size or scope and/or will make significant
  changes to the internal implementation.
- See the role of libc++ with Flowgen. http://libcxx.llvm.org/
  Is it being currently used by default by Flowgen?


RESILIENCE TO USER ERRORS
- Some user errors could be handled in a better way.  As an example,
  if the script fails to load the clang library (because e.g. the
  user didn't properly modify its LD_LIBRARY_PATH), then it prints
  the traceback for throwing a Python exception (more specifically,
  it seems a second exception occurs while a first exception is
  handled).  For a future version of their code, the authors might
  consider the possibility of catching the exception, printing a more
  readable error message, and terminate the script themselves,
  e.g. with "sys.exit()".  The same suggestion applies to any other
  error which might occur during the execution of a Flowgen script.
- Flowgen seems to silently ignore some annotation errors.  For
  instance, the following erroneous annotation

    //$ [condition]
    std::cout << "This is not an if, for or while statement" << std::endl;

  seems to be simply ignored, despite the comment starting with
  "//$". They might
  consider issuing a warning or an error for such cases.

EVOLUTION
Evolution of the documentation: when the source code changes, the generated documentation might become obsolete, e.g., since FlowGen annotations become obsolete (as any kinds of comments or documents). I wonder whether FlowGen or a similar tool can be integrated in the developers' way of working (IDE, version control system, etc) such that code modification pertaining to the annotated code alert the developer requesting her to confirm whether the annotation is still valid.

FLOWGEN INNER WORKINGS
- zoomlevel_beforeifstmt (keep for after the ifstmt)

BUGS
1. with the example program, one may get (reproduce): <Diagnostic severity 4, location <SourceLocation file b'src/source1.cpp', line 2, column 10>, spelling b"'iostream' file not found">

http://stackoverflow.com/questions/19642590/libtooling-cant-find-stddef-h-nor-other-headers
——
I encountered a similar issue using the python bindings.

[<Diagnostic severity 4, location <SourceLocation file '/usr/include/stdio.h', line 33, column 11>, spelling "'stddef.h' file not found">]

In the "Tips" section at

http://clang.llvm.org/docs/LibTooling.html

they mention that the default include path is

$(dirname /path/to/tool)/../lib/clang/3.3/include

The idea here it seems, is that it is expected that your tool is executing from the bin directory that also contains the clang executable itself. Typically, this will be a system directory so going up one from that will have the lib directory which contains the clang/3.4/include directory. So I manually included $(which clang)../lib/clang/3.4/include to the parser. In python, this looks something like

translation_unit = index.parse("test.cc",["-I/home/archgoon/usr/local/lib/clang/3.4/include"])

This resulted in translation_unit.diagnostics being an empty list.
—— 


3. Bug. This code(below) produces error(below). If I replace $1 —> $ then it is OK. The problem is with the variable ‘write_zoomlevel’ that is not being initialized.


  bool VinciaFSR::acceptTrial(Event& event, Branchelemental* trialPtr) {
    
    // Verbose output
    if (verbose >= 7) {
      printOut("VS::acceptTrial","begin --------------");
    }

    //***********************************************************************
    //$1 Optional: start by checking section veto (if doing sector showers) 
    //***********************************************************************
 
    if (sectorShower) {
      if (!sectorAccept(event,trialPtr)) {
        if (verbose >= 5) printOut("VS::acceptTrial",
                                   "Branching Vetoed. Failed sector veto.");
        // Count up local and global failure rate due to hull and return false
        trialPtr->nHull++;
        ++nTrialsHull;
        return false;
      } else { 
        if (verbose >= 7) printOut("VS::acceptTrial",
                                   "Trial passed sector veto. Continuing...");
      }    
    }  
    
    //************************************************************************
    //$ Check global hadronization veto(s) (requiring full event)


Processing acceptTrial of kind CXX_METHOD [start_line=1986, end_line=2996. At "<File: b'src/VinciaFSR.cc'>"]
Traceback (most recent call last):
  File "/Users/jlopezvi/Flowgen/makeflows.py", line 841, in <module>
    find_functions(tu.cursor)
  File "/Users/jlopezvi/Flowgen/makeflows.py", line 822, in find_functions
    find_functions(c)
  File "/Users/jlopezvi/Flowgen/makeflows.py", line 822, in find_functions
    find_functions(c)
  File "/Users/jlopezvi/Flowgen/makeflows.py", line 816, in find_functions
    process_find_functions(node,read_single_flowdb.max_diagram_zoomlevel)
  File "/Users/jlopezvi/Flowgen/makeflows.py", line 792, in process_find_functions
    add_note("possible STOP")
  File "/Users/jlopezvi/Flowgen/makeflows.py", line 408, in add_note
    string_notes[write_zoomlevel]+=stringIN+'\n'



